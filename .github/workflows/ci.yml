name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Test import of main modules
      run: |
        python -c "
        try:
            from buscador_catmat import BuscadorSemanticoCatmat
            from config_manager import ConfigManager
            from data_handler import DataHandler
            from embeddings_engine import EmbeddingsEngine
            from search_engine import SearchEngine
            from ai_recommender import AIRecommender
            from export_utils import ExportUtils
            from batch_processor import BatchProcessor
            from special_exporter import SpecialExporter
            print('✅ All modules imported successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "
    
    - name: Check if config.json exists or create example
      run: |
        if [ ! -f config.json ]; then
          echo "Creating example config.json for testing"
          cat > config.json << EOF
        {
          \"model_name\": \"intfloat/e5-base-v2\",
          \"hnsw_m\": 32,
          \"hnsw_ef_construction\": 200,
          \"hnsw_ef_search\": 100,
          \"batch_size\": 32,
          \"n_workers\": 4,
          \"openai_api_key\": \"test-key\",
          \"openai_model\": \"gpt-4o-mini\",
          \"max_tokens\": 1000,
          \"temperature\": 0.3
        }
        EOF
        fi
    
    - name: Run basic functionality tests
      run: |
        python -c "
        import pandas as pd
        from config_manager import ConfigManager
        from data_handler import DataHandler
        
        # Test config manager
        config = ConfigManager()
        print('✅ ConfigManager initialized')
        
        # Test data handler with sample data
        sample_data = pd.DataFrame({
            'Código do Item': ['001', '002'],
            'Descrição do Item': ['Test item 1', 'Test item 2']
        })
        sample_data.to_csv('test_catmat.csv', index=False)
        
        handler = DataHandler('test_catmat.csv')
        data = handler.load_data()
        print(f'✅ DataHandler loaded {len(data)} items')
        
        import os
        os.remove('test_catmat.csv')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security scanning tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
    
    - name: Run Safety check for vulnerabilities
      run: |
        safety check || true

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << EOF
        FROM python:3.11-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \\
            gcc \\
            g++ \\
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY . .
        
        # Create non-root user
        RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
        USER appuser
        
        # Expose port
        EXPOSE 7860
        
        # Run the application
        CMD ["python", "app_gradio.py"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t buscamat:latest .
        echo "✅ Docker image built successfully"

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install quality tools
      run: |
        pip install flake8 mypy pylint complexity
    
    - name: Generate code quality report
      run: |
        echo "## Code Quality Report" > quality-report.md
        echo "" >> quality-report.md
        
        echo "### Complexity Analysis" >> quality-report.md
        echo '```' >> quality-report.md
        python -m mccabe --min 10 *.py >> quality-report.md || true
        echo '```' >> quality-report.md
        
        echo "" >> quality-report.md
        echo "### Pylint Score" >> quality-report.md
        echo '```' >> quality-report.md
        pylint *.py --exit-zero >> quality-report.md || true
        echo '```' >> quality-report.md
        
        cat quality-report.md